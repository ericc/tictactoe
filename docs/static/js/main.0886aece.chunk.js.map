{"version":3,"sources":["actions/actionCreators.js","data/brain.js","components/GameBoard.js","components/Settings.js","components/Result.js","components/GameConsole.js","components/Main.js","components/App.js","reducers/gameState.js","reducers/settings.js","reducers/index.js","store.js","data/gameState.js","data/settings.js","registerServiceWorker.js","index.js"],"names":["move","position","type","computerMove","userFirst","changeCharacter","character","changeFirst","changeGameState","status","resetGame","changeSettingVisibility","visible","brain","winConditions","cornerTraps","traps","danger","grid","corners","edges","GameBoard","space","i","userCharacter","computerCharacter","this","props","settings","players","user","className","key","onClick","makeMove","bind","gameState","boardState","indexOf","computer","firstRow","slice","map","renderSquare","secondRow","thirdRow","id","active","Component","Settings","startGame","goFirst","renderInGameActions","renderPreGameActions","htmlFor","ref","name","value","defaultChecked","onChange","formVisibility","renderSettingsForm","renderSettingsDisplay","Result","result","GameConsole","store","occupied","userMove","console","log","concat","renderResult","Main","App","connect","state","dispatch","bindActionCreators","actionCreators","contains","arr1","arr2","every","item","diff","diffArray","forEach","push","checkGameOver","availableMoves","checkWin","winCondition","remainingMoves","length","getWinningMoves","player","opponent","opponentWinningMoves","remainingToWin","opponentWinningMove","pop","availableCorners","usableCorners","cornerTrap","trap","splice","r","Math","floor","random","availableSpaces","action","newState","Object","assign","userMoves","userWinningMoves","computerWinningMoves","substring","availableEdges","rootReducer","combineReducers","routing","routerReducer","defaultState","createStore","applyMiddleware","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","provider","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0886aece.chunk.js","sourcesContent":["// Execute a move\nexport function move(position) {\n    return {\n        type: 'MOVE',\n        position\n    }\n}\n\nexport function computerMove(userFirst) {\n    return {\n        type: 'COMPUTER_MOVE',\n        userFirst\n    }\n}\n\n// Change Character\nexport function changeCharacter(character) {\n    return {\n        type: 'CHANGE_CHARACTER',\n        character\n    }\n}\n\n// Change who goes first\nexport function changeFirst() {\n    return {\n        type: 'CHANGE_FIRST',\n    }\n}\n\nexport function changeGameState(status) {\n    return {\n        type: 'CHANGE_GAME_STATE',\n        status\n    }\n}\nexport function resetGame() {\n    return {\n        type: 'RESET_GAME'\n    }\n}\n\nexport function changeSettingVisibility(visible) {\n    return {\n        type: 'CHANGE_SETTING_VISIBILITY',\n        visible\n    }\n}","const brain = {\n    winConditions: [\n        ['aa','bb','cc'],\n        ['ac','bb','ca'],\n        ['aa','ab','ac'],\n        ['ba','bb','bc'],\n        ['ca','cb','cc'],\n        ['aa','ba','ca'],\n        ['ab','bb','cb'],\n        ['ac','bc','cc']\n    ],\n    cornerTraps: [\n        {\n            traps: [\n                ['ba', 'ab'],\n                ['ba', 'ac'],\n                ['ab', 'ca']\n            ],\n            danger: 'cc'\n        },\n        {\n            traps: [\n                ['ab', 'bc'],\n                ['ab', 'cc'],\n                ['aa', 'bc']\n            ],\n            danger: 'ca'\n        },\n        {\n            traps: [\n                ['bc', 'cb'],\n                ['cb', 'ac'],\n                ['bc', 'ca']\n            ],\n            danger: 'aa'\n        },\n        {\n            traps: [\n                ['ba', 'cb'],\n                ['aa', 'cb'],\n                ['ba', 'cc']\n            ],\n            danger: 'ac'\n        },\n    ],\n    grid: ['aa', 'ba', 'ca', 'ab', 'bb', 'cb', 'ac',  'bc', 'cc'],\n    corners: ['aa','ca', 'cc', 'ac'],\n    edges: ['ab', 'ba', 'bc', 'cb']\n};\n\nexport default brain;","import React, { Component } from 'react';\nimport brain from '../data/brain';\n\n// Presentational Component\nclass GameBoard extends Component {\n    renderSquare(space, i) {\n        // User and Computer space occupation\n        let userCharacter;\n        let computerCharacter;\n        if (this.props.settings.players.user === 'o') {\n            userCharacter = <i className=\"fa fa-circle-o\"></i>;\n            computerCharacter = <i className=\"fa fa-times\"></i>;\n        } else {\n            userCharacter = <i className=\"fa fa-times\"></i>;\n            computerCharacter = <i className=\"fa fa-circle-o\"></i>;\n        }\n        return (\n            <div className=\"board-col\" key={i} onClick={this.props.makeMove.bind(this, space)}>\n                {this.props.gameState.boardState.user.indexOf(space) > -1 ? userCharacter : ''}\n                {this.props.gameState.boardState.computer.indexOf(space) > -1 ? computerCharacter : ''}\n            </div>\n        );\n    }\n    render () {\n        let firstRow = brain.grid.slice(0,3).map(this.renderSquare, this);\n        let secondRow = brain.grid.slice(3,6).map(this.renderSquare, this);\n        let thirdRow = brain.grid.slice(6,9).map(this.renderSquare, this);\n\n        return (\n            <div id=\"board\">\n                {this.props.gameState.active ? null : <div id=\"pending-overlay\"><p><i className=\"fa fa-pause\"></i></p></div>}\n                <div id=\"grid\">\n                    <div className=\"board-row\">\n                        {firstRow}\n                    </div>\n                    <div className=\"board-row\">\n                        {secondRow}\n                    </div>\n                    <div className=\"board-row\">\n                        {thirdRow}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\n\n// Presentational Component\nclass Settings extends Component {\n    renderPreGameActions () {\n        return (\n            <div id=\"game-actions\">\n                <button type=\"button\" className=\"btn btn-start\" onClick={this.props.startGame.bind(this)}>Start!</button>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.props.changeSettingVisibility}><i className=\"fa fa-pencil fa-btn\"></i> Edit</button>\n            </div>\n        );\n    }\n    renderInGameActions() {\n        return (\n            <div id=\"in-game-actions\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.props.resetGame}><i className=\"fa fa-refresh fa-btn\"></i> Reset</button>\n                <button type=\"button\" className=\"btn btn-stop\" onClick={this.props.changeGameState}><i className=\"fa fa-stop fa-btn\"></i> Stop</button>\n            </div>\n        );\n    }\n    renderSettingsDisplay() {\n        return (\n            <div id=\"display\">\n                <p>You are currently playing as:</p>\n                <div id=\"character-display\">\n                    {this.props.userCharacter === 'o' ? <i className=\"fa fa-circle-o\"></i> : <i className=\"fa fa-times\"></i>}\n                </div>\n                <p id=\"first-text\">{this.props.goFirst === true ? 'You are going first.' : 'Computer starts.'}</p>\n                <div className=\"form-group text-center\">\n                    {this.props.gameState.active ? this.renderInGameActions() : this.renderPreGameActions()}\n                </div>\n            </div>\n        );\n    }\n    renderSettingsForm () {\n        return (\n            <form>\n                <div className=\"form-group\">\n                    <p>Choose a character:</p>\n                    <label htmlFor=\"o\" className=\"characters\">\n                        <input type=\"radio\" id=\"o\" ref=\"character\" name=\"character\" value=\"o\" defaultChecked={this.props.userCharacter === 'o'} onChange={this.props.changeCharacter} />\n                        <span><i className=\"fa fa-circle-o\"></i></span>\n                    </label>\n                    <label htmlFor=\"x\" className=\"characters\">\n                        <input type=\"radio\" id=\"x\" ref=\"character\" name=\"character\" value=\"x\" defaultChecked={this.props.userCharacter === 'x'} onChange={this.props.changeCharacter} />\n                        <span><i className=\"fa fa-times\"></i></span>\n                    </label>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"first\"><input type=\"checkbox\" id=\"first\" defaultChecked={this.props.goFirst} onChange={this.props.changeFirst.bind(this)} /> Go First</label>\n                </div>\n                <div className=\"form-group text-center\">\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.props.changeSettingVisibility}><i className=\"fa fa-undo fa-btn\"></i> Back</button>\n                </div>\n            </form>\n        );\n    }\n    render() {\n        return (\n            <div id=\"settings-panel\" className=\"panel text-center\">\n                <h2 className=\"text-center panel-heading\"><i className=\"fa fa-cog\"></i> Game Settings</h2>\n                {this.props.formVisibility ? this.renderSettingsForm() : this.renderSettingsDisplay()}\n\n            </div>\n        );\n    }\n}\n\nexport default Settings;","import React, { Component } from 'react';\n\nclass Result extends Component {\n    render () {\n        return (\n            <div id=\"results\" className=\"overlay\">\n                <div className=\"panel\">\n                    <h2 className=\"panel-heading text-center\">Results</h2>\n                    <div className=\"text-center\">\n                        <p id=\"message\">\n                            {this.props.result === 'COMPUTER_WINS' ? 'The Computer has won!' : 'The game has ended in a tie.'}\n                        </p>\n                        <div className=\"form-group\">\n                            <button type=\"button\" id=\"restart-btn\" className=\"btn btn-primary\" onClick={this.props.resetGame}><i className=\"fa fa-repeat fa-btn\"></i></button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Result;","import React, { Component } from 'react';\n\nimport GameBoard from './GameBoard';\nimport Settings from './Settings';\nimport Result from './Result';\n\nclass GameConsole extends Component {\n    // Container Component - All the logic goes in here\n    renderResult () {\n        switch (this.props.store.gameState.result) {\n            case 'COMPUTER_WINS':\n            case 'CATS_GAME':\n                return <Result\n                    result={this.props.store.gameState.result}\n                    resetGame={this.props.store.resetGame}\n                />;\n            case 'GAME_IN_PROGRESS':\n            default:\n                return '';\n        }\n    }\n    move(space) {\n        if (this.props.occupied.indexOf(space) === -1) {\n            this.props.userMove(space);\n            this.props.computerMove(this.props.settings.goFirst);\n        } else {\n            console.log('Space already taken!');\n        }\n    }\n    startGame() {\n        this.props.changeGameState();\n        if (!this.props.goFirst) {\n            this.props.computerMove(this.props.goFirst);\n        }\n    }\n    render () {\n        return (\n            <div id=\"game-console\">\n                <Settings\n                    changeCharacter={this.props.store.changeCharacter}\n                    changeFirst={this.props.store.changeFirst}\n                    userCharacter={this.props.store.settings.players.user}\n                    goFirst={this.props.store.settings.goFirst}\n                    formVisibility={this.props.store.settings.visible}\n                    changeGameState = {this.props.store.changeGameState}\n                    startGame={this.startGame}\n                    resetGame={this.props.store.resetGame}\n                    changeSettingVisibility={this.props.store.changeSettingVisibility}\n                    gameState={this.props.store.gameState}\n                    computerMove={this.props.store.computerMove}\n                />\n                <GameBoard\n                    occupied={this.props.store.gameState.boardState.user.concat(this.props.store.gameState.boardState.computer)}\n                    settings={this.props.store.settings}\n                    gameState={this.props.store.gameState}\n                    boardState={this.props.store.gameState.boardState}\n                    makeMove={this.move}\n                    userMove={this.props.store.move}\n                    computerMove={this.props.store.computerMove}\n                />\n                {this.renderResult()}\n            </div>\n        );\n    }\n}\n\nexport default GameConsole;","import React, { Component } from 'react';\n\nimport '../styles/App.css';\nimport GameConsole from './GameConsole';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <h1 className=\"text-center\">Zero Sum Game</h1>\n                <GameConsole store={this.props} />\n            </div>\n        );\n    }\n}\n\nexport default Main;","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../actions/actionCreators';\nimport Main from './Main';\n\n\nconst mapStateToProps = (state) => {\n    return  {\n        gameState: state.gameState,\n        settings: state.settings\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators(actionCreators, dispatch);\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(Main);\n\nexport default App;\n\n\n","// a reducer takes in two things:\n\n// 1. the action (information about what happened)\n// 2. copy of current state\nimport brain from \"../data/brain\";\n\nconst contains = function (arr1, arr2) {\n  return arr2.every(function (item) {\n    return arr1.indexOf(item) !== -1;\n  }, arr1);\n};\n\n// Create function that gets the difference between two arrays\nconst diff = function (arr1, arr2) {\n  let diffArray = [];\n  arr1.forEach(function (space) {\n    if (!contains(arr2, [space])) {\n      diffArray.push(space);\n    }\n  });\n  return diffArray;\n};\n\n// Function to evaluate if the game is over\nfunction checkGameOver(boardState, occupied, availableMoves, userFirst) {\n  let checkWin = [];\n  brain.winConditions.forEach(function (winCondition) {\n    checkWin.push(contains(boardState.computer, winCondition));\n  });\n  let remainingMoves = userFirst === false ? 2 : 1;\n  if (contains(checkWin, [true])) {\n    return \"COMPUTER_WINS\";\n  } else if (availableMoves.length < remainingMoves) {\n    return \"CATS_GAME\";\n  } else {\n    return \"GAME_IN_PROGRESS\";\n  }\n}\n\n// Function to get Winning Moves\nfunction getWinningMoves(boardState, player, availableMoves) {\n  // Check if opponent is about to win\n  let opponent = boardState[player];\n  let opponentWinningMoves = [];\n  // Grab the winConditions from the brain\n  brain.winConditions.forEach(function (winCondition) {\n    let remainingToWin = diff(winCondition, opponent);\n    // If opponent is one move away from winning block it\n    if (remainingToWin.length === 1) {\n      opponentWinningMoves.push(remainingToWin[0]);\n      opponentWinningMoves.forEach(function (opponentWinningMove) {\n        if (!contains(availableMoves, [opponentWinningMove])) {\n          opponentWinningMoves.pop(opponentWinningMove);\n        }\n      });\n    }\n  });\n  return opponentWinningMoves;\n}\n\n// Function for optimal turn moves\nfunction position(boardState, occupied) {\n  // Computer must secure adjacent corners or the center space to ensure CAT\n  // If center space is available, secure it, otherwise take the nearest corner\n  if (!contains(occupied, [\"bb\"])) {\n    // computer should always go into the center when possible\n    return \"bb\";\n  } else {\n    // Are any of the corners occupied?\n    // let availableCorners = getOptions(corners, occupied);\n    let availableCorners = diff(brain.corners, occupied);\n    if (availableCorners.length > 0) {\n      // Randomly select a corner from the unoccupied corners\n      // Additionally, anticipate the corner trap strategy and counter it, remove the losing move from the array of possibilities\n      let usableCorners = availableCorners;\n      brain.cornerTraps.forEach(function (cornerTrap) {\n        cornerTrap.traps.forEach(function (trap) {\n          if (boardState.user.length === 2 && contains(trap, boardState.user)) {\n            usableCorners.splice(usableCorners.indexOf(cornerTrap.danger), 1);\n            console.log(\"Trap countered!\");\n            return false;\n          }\n        });\n      });\n      let r = Math.floor(Math.random() * usableCorners.length);\n      return usableCorners[r];\n    } else {\n      // Get the available space and put it there randomly\n      let availableSpaces = diff(brain.grid, occupied);\n      let i = Math.floor(Math.random() * availableSpaces.length);\n      return availableSpaces[i];\n    }\n  }\n}\n\nfunction gameState(state = {}, action) {\n  // Copy State\n  let newState = Object.assign({}, state);\n\n  switch (action.type) {\n    case \"CHANGE_GAME_STATE\":\n      // change the state\n      newState.active = !state.active;\n\n      // Reset the board\n      newState.boardState.user = [];\n      newState.boardState.computer = [];\n\n      return newState;\n    case \"RESET_GAME\":\n      // Reset the board\n      newState.boardState.user = [];\n      newState.boardState.computer = [];\n      newState.result = \"GAME_IN_PROGRESS\";\n      return newState;\n    case \"MOVE\":\n      const move = action.position;\n      let userMoves = state.boardState.user.slice();\n      // prevent users from updating state when they click on an occupied space.\n      if (\n        !contains(\n          newState.boardState.user.concat(newState.boardState.computer),\n          [move]\n        )\n      ) {\n        userMoves.push(move);\n        newState.boardState.user = userMoves;\n        return newState;\n      } else {\n        return state;\n      }\n    case \"COMPUTER_MOVE\":\n      let computerMove;\n      // Get all the occupied spaces\n      let occupied = state.boardState.user.concat(state.boardState.computer);\n      // Get Available Moves\n      let availableMoves = diff(brain.grid, occupied);\n      let opponent = state.boardState.user;\n\n      const userWinningMoves = getWinningMoves(\n        state.boardState,\n        \"user\",\n        availableMoves\n      );\n      const computerWinningMoves = getWinningMoves(\n        state.boardState,\n        \"computer\",\n        availableMoves\n      );\n\n      if (opponent.length === 1) {\n        console.log(\"Strategy: Positioning\");\n        computerMove = position(state.boardState, occupied);\n      } else if (\n        contains(state.boardState.computer, [\"bb\"]) &&\n        state.boardState.computer.length === 1 &&\n        state.boardState.user.length === 2 &&\n        contains(brain.corners, state.boardState.user) &&\n        diff(brain.corners, state.boardState.user).length === 2 &&\n        state.boardState.user[0].substring(1) !==\n          state.boardState.user[1].substring(1) &&\n        state.boardState.user[0].substring(0, 1) !==\n          state.boardState.user[1].substring(0, 1)\n      ) {\n        console.log(\"Strategy: Diagonal Counter\");\n        let availableEdges = diff(brain.edges, occupied);\n        let i = Math.floor(Math.random() * availableEdges.length);\n        computerMove = availableEdges[i];\n      } else if (computerWinningMoves.length > 0) {\n        console.log(\"Strategy: Offense\");\n        computerMove = computerWinningMoves[0];\n      } else if (userWinningMoves.length > 0) {\n        console.log(\"Strategy: Defense\");\n        computerMove = userWinningMoves[0];\n      } else {\n        console.log(\"Strategy: Positioning\");\n        computerMove = position(state.boardState, occupied);\n      }\n      newState.boardState.computer.push(computerMove);\n\n      // Check if the game is over\n      newState.result = checkGameOver(\n        newState.boardState,\n        occupied,\n        availableMoves,\n        action.userFirst\n      );\n\n      return newState;\n    default:\n      return state;\n  }\n}\n\nexport default gameState;\n","function settings (state = {}, action) {\n    let newState = Object.assign({}, state);\n    switch (action.type) {\n        case 'CHANGE_SETTING_VISIBILITY':\n            newState.visible = !state.visible;\n            return newState;\n        case 'CHANGE_CHARACTER':\n            if (state.players.user === 'o') {\n                newState.players.user = 'x';\n                newState.players.computer = 'o';\n            } else {\n                newState.players.user = 'o';\n                newState.players.computer = 'x';\n            }\n            return newState;\n        case 'CHANGE_FIRST':\n            newState.goFirst = !state.goFirst;\n            return newState;\n        default:\n            return state;\n    }\n\n}\n\nexport default settings;","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\n\nimport gameState from './gameState';\nimport settings from './settings';\n\nconst rootReducer = combineReducers({settings, gameState, routing: routerReducer});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n// import the root reducer\nimport rootReducer from './reducers/index';\nimport gameState from './data/gameState';\nimport settings from './data/settings';\n\n// create an object for the default data\n// ES6 the key is the same name as the value so just put the variable in.\nconst defaultState = {\n    gameState,\n    settings\n};\n\nconst store = createStore(rootReducer, defaultState, applyMiddleware(thunk));\n\nexport default store;","const gameState = {\n  active: false,\n  boardState: {\n    user: [],\n    computer: [],\n  },\n  result: \"GAME_IN_PROGRESS\",\n};\n\nexport default gameState;\n","const settings = {\n    visible: false,\n    players: {\n        user: 'o',\n        computer: 'x'\n    },\n    goFirst: true\n};\n\nexport default settings;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\n\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst provider = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(provider, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}